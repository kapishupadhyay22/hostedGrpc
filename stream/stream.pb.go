// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v3.21.12
// source: stream/stream.proto

package stream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request to start the stream
type StreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	mi := &file_stream_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_stream_stream_proto_rawDescGZIP(), []int{0}
}

func (x *StreamRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// A single event message sent from the server
type Event struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	EventId string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Type    string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Using Struct for a flexible JSON-like payload
	Payload       *structpb.Struct `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_stream_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_stream_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetPayload() *structpb.Struct {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_stream_stream_proto protoreflect.FileDescriptor

const file_stream_stream_proto_rawDesc = "" +
	"\n" +
	"\x13stream/stream.proto\x12\x06stream\x1a\x1cgoogle/protobuf/struct.proto\",\n" +
	"\rStreamRequest\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\"i\n" +
	"\x05Event\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x121\n" +
	"\apayload\x18\x03 \x01(\v2\x17.google.protobuf.StructR\apayload2?\n" +
	"\bStreamer\x123\n" +
	"\tSubscribe\x12\x15.stream.StreamRequest\x1a\r.stream.Event0\x01B\n" +
	"Z\b./streamb\x06proto3"

var (
	file_stream_stream_proto_rawDescOnce sync.Once
	file_stream_stream_proto_rawDescData []byte
)

func file_stream_stream_proto_rawDescGZIP() []byte {
	file_stream_stream_proto_rawDescOnce.Do(func() {
		file_stream_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stream_stream_proto_rawDesc), len(file_stream_stream_proto_rawDesc)))
	})
	return file_stream_stream_proto_rawDescData
}

var file_stream_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_stream_stream_proto_goTypes = []any{
	(*StreamRequest)(nil),   // 0: stream.StreamRequest
	(*Event)(nil),           // 1: stream.Event
	(*structpb.Struct)(nil), // 2: google.protobuf.Struct
}
var file_stream_stream_proto_depIdxs = []int32{
	2, // 0: stream.Event.payload:type_name -> google.protobuf.Struct
	0, // 1: stream.Streamer.Subscribe:input_type -> stream.StreamRequest
	1, // 2: stream.Streamer.Subscribe:output_type -> stream.Event
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_stream_stream_proto_init() }
func file_stream_stream_proto_init() {
	if File_stream_stream_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stream_stream_proto_rawDesc), len(file_stream_stream_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_stream_proto_goTypes,
		DependencyIndexes: file_stream_stream_proto_depIdxs,
		MessageInfos:      file_stream_stream_proto_msgTypes,
	}.Build()
	File_stream_stream_proto = out.File
	file_stream_stream_proto_goTypes = nil
	file_stream_stream_proto_depIdxs = nil
}
